# typed: strong

module Increase
  module Models
    class File < Increase::BaseModel
      sig { returns(String) }
      attr_accessor :id

      sig { returns(Time) }
      attr_accessor :created_at

      sig { returns(T.nilable(String)) }
      attr_accessor :description

      sig { returns(Symbol) }
      attr_accessor :direction

      sig { returns(T.nilable(String)) }
      attr_accessor :download_url

      sig { returns(T.nilable(String)) }
      attr_accessor :filename

      sig { returns(T.nilable(String)) }
      attr_accessor :idempotency_key

      sig { returns(String) }
      attr_accessor :mime_type

      sig { returns(Symbol) }
      attr_accessor :purpose

      sig { returns(Symbol) }
      attr_accessor :type

      sig do
        params(
          id: String,
          created_at: Time,
          description: T.nilable(String),
          direction: Symbol,
          download_url: T.nilable(String),
          filename: T.nilable(String),
          idempotency_key: T.nilable(String),
          mime_type: String,
          purpose: Symbol,
          type: Symbol
        ).void
      end
      def initialize(
        id:,
        created_at:,
        description:,
        direction:,
        download_url:,
        filename:,
        idempotency_key:,
        mime_type:,
        purpose:,
        type:
      )
      end

      sig do
        override.returns(
          {
            id: String,
            created_at: Time,
            description: T.nilable(String),
            direction: Symbol,
            download_url: T.nilable(String),
            filename: T.nilable(String),
            idempotency_key: T.nilable(String),
            mime_type: String,
            purpose: Symbol,
            type: Symbol
          }
        )
      end
      def to_hash
      end

      class Direction < Increase::Enum
        abstract!

        # This File was sent by you to Increase.
        TO_INCREASE = :to_increase

        # This File was generated by Increase.
        FROM_INCREASE = :from_increase

        sig { override.returns(T::Array[Symbol]) }
        def self.values
        end
      end

      class Purpose < Increase::Enum
        abstract!

        # An image of the front of a check, used for check deposits.
        CHECK_IMAGE_FRONT = :check_image_front

        # An image of the back of a check, used for check deposits.
        CHECK_IMAGE_BACK = :check_image_back

        # An image of the front of a deposited check after processing by Increase and submission to the Federal Reserve.
        PROCESSED_CHECK_IMAGE_FRONT = :processed_check_image_front

        # An image of the back of a deposited check after processing by Increase and submission to the Federal Reserve.
        PROCESSED_CHECK_IMAGE_BACK = :processed_check_image_back

        # An image of a check that was mailed to a recipient.
        MAILED_CHECK_IMAGE = :mailed_check_image

        # An image to be printed on the bottom or voucher of a check that you've requested Increase print.
        CHECK_VOUCHER_IMAGE = :check_voucher_image

        # An image to be printed on an additional page and mailed with a check that you've requested Increase print.
        CHECK_ATTACHMENT_IMAGE = :check_attachment_image

        # A scanned mail item sent to Increase.
        INBOUND_MAIL_ITEM = :inbound_mail_item

        # IRS Form 1099-INT.
        FORM_1099_INT = :form_1099_int

        # IRS Form 1099-MISC.
        FORM_1099_MISC = :form_1099_misc

        # IRS Form SS-4.
        FORM_SS_4 = :form_ss_4

        # An image of a government-issued ID.
        IDENTITY_DOCUMENT = :identity_document

        # A statement generated by Increase.
        INCREASE_STATEMENT = :increase_statement

        # A file purpose not covered by any of the other cases.
        OTHER = :other

        # A legal document forming a trust.
        TRUST_FORMATION_DOCUMENT = :trust_formation_document

        # A card image to be rendered inside digital wallet apps. This must be a 1536x969 pixel PNG.
        DIGITAL_WALLET_ARTWORK = :digital_wallet_artwork

        # An icon for you app to be rendered inside digital wallet apps. This must be a 100x100 pixel PNG.
        DIGITAL_WALLET_APP_ICON = :digital_wallet_app_icon

        # A card image to be printed on the front of a physical card. This must be a 2100x1340 pixel PNG with no other color but black.
        PHYSICAL_CARD_FRONT = :physical_card_front

        # The image to be printed on the back of a physical card.
        PHYSICAL_CARD_BACK = :physical_card_back

        # An image representing the entirety of the carrier used for a physical card. This must be a 2550x3300 pixel PNG with no other color but black.
        PHYSICAL_CARD_CARRIER = :physical_card_carrier

        # A document requested by Increase.
        DOCUMENT_REQUEST = :document_request

        # A supplemental document associated an an Entity.
        ENTITY_SUPPLEMENTAL_DOCUMENT = :entity_supplemental_document

        # The results of an Export you requested via the dashboard or API.
        EXPORT = :export

        # An attachment to an Unusual Activity Report.
        UNUSUAL_ACTIVITY_REPORT_ATTACHMENT = :unusual_activity_report_attachment

        # A document granting another entity access to the funds into your account.
        DEPOSIT_ACCOUNT_CONTROL_AGREEMENT = :deposit_account_control_agreement

        sig { override.returns(T::Array[Symbol]) }
        def self.values
        end
      end

      class Type < Increase::Enum
        abstract!

        FILE = :file

        sig { override.returns(T::Array[Symbol]) }
        def self.values
        end
      end
    end
  end
end
