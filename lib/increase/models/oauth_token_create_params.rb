# frozen_string_literal: true

module Increase
  module Models
    class OAuthTokenCreateParams < Increase::BaseModel
      # @!attribute grant_type
      #   The credential you request in exchange for the code. In Production, this is always `authorization_code`. In Sandbox, you can pass either enum value.
      #
      #   @return [Symbol, Increase::Models::OAuthTokenCreateParams::GrantType]
      required :grant_type, enum: -> { Increase::Models::OAuthTokenCreateParams::GrantType }

      # @!attribute client_id
      #   The public identifier for your application.
      #
      #   @return [String]
      optional :client_id, String

      # @!attribute client_secret
      #   The secret that confirms you own the application. This is redundent given that the request is made with your API key but it's a required component of OAuth 2.0.
      #
      #   @return [String]
      optional :client_secret, String

      # @!attribute code
      #   The authorization code generated by the user and given to you as a query parameter.
      #
      #   @return [String]
      optional :code, String

      # @!attribute production_token
      #   The production token you want to exchange for a sandbox token. This is only available in Sandbox. Set `grant_type` to `production_token` to use this parameter.
      #
      #   @return [String]
      optional :production_token, String

      # @!parse
      #   # @param grant_type [String] The credential you request in exchange for the code. In Production, this is
      #   #   always `authorization_code`. In Sandbox, you can pass either enum value.
      #   #
      #   # @param client_id [String] The public identifier for your application.
      #   #
      #   # @param client_secret [String] The secret that confirms you own the application. This is redundent given that
      #   #   the request is made with your API key but it's a required component of OAuth
      #   #   2.0.
      #   #
      #   # @param code [String] The authorization code generated by the user and given to you as a query
      #   #   parameter.
      #   #
      #   # @param production_token [String] The production token you want to exchange for a sandbox token. This is only
      #   #   available in Sandbox. Set `grant_type` to `production_token` to use this
      #   #   parameter.
      #   #
      #   def initialize(grant_type:, client_id: nil, client_secret: nil, code: nil, production_token: nil, **) = super

      # def initialize: (Hash | Increase::BaseModel) -> void

      # The credential you request in exchange for the code. In Production, this is always `authorization_code`. In Sandbox, you can pass either enum value.
      #
      # @example
      #
      # ```ruby
      # case grant_type
      # in :authorization_code
      #   # ...
      # in :production_token
      #   # ...
      # end
      # ```
      class GrantType < Increase::Enum
        # An OAuth authorization code.
        AUTHORIZATION_CODE = :authorization_code

        # An OAuth production token.
        PRODUCTION_TOKEN = :production_token

        finalize!
      end
    end
  end
end
