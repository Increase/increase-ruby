module Increase
  module Models
    type card_push_transfer =
      {
        id: String,
        acceptance: Increase::CardPushTransfer::Acceptance?,
        account_id: String,
        amount: Integer,
        approval: Increase::CardPushTransfer::Approval?,
        business_application_identifier: Increase::Models::CardPushTransfer::business_application_identifier,
        cancellation: Increase::CardPushTransfer::Cancellation?,
        created_at: Time,
        created_by: Increase::CardPushTransfer::CreatedBy?,
        currency: Increase::Models::CardPushTransfer::currency,
        decline: Increase::CardPushTransfer::Decline?,
        idempotency_key: String?,
        merchant_category_code: String,
        merchant_city_name: String,
        merchant_name: String,
        merchant_name_prefix: String,
        merchant_postal_code: String,
        merchant_state: String,
        recipient_name: String,
        sender_address_city: String,
        :sender_address_line1 => String,
        sender_address_postal_code: String,
        sender_address_state: String,
        sender_name: String,
        source_account_number_id: String,
        status: Increase::Models::CardPushTransfer::status,
        submission: Increase::CardPushTransfer::Submission?,
        type: Increase::Models::CardPushTransfer::type_
      }

    class CardPushTransfer < Increase::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor acceptance: Increase::CardPushTransfer::Acceptance?

      attr_accessor account_id: String

      attr_accessor amount: Integer

      attr_accessor approval: Increase::CardPushTransfer::Approval?

      attr_accessor business_application_identifier: Increase::Models::CardPushTransfer::business_application_identifier

      attr_accessor cancellation: Increase::CardPushTransfer::Cancellation?

      attr_accessor created_at: Time

      attr_accessor created_by: Increase::CardPushTransfer::CreatedBy?

      attr_accessor currency: Increase::Models::CardPushTransfer::currency

      attr_accessor decline: Increase::CardPushTransfer::Decline?

      attr_accessor idempotency_key: String?

      attr_accessor merchant_category_code: String

      attr_accessor merchant_city_name: String

      attr_accessor merchant_name: String

      attr_accessor merchant_name_prefix: String

      attr_accessor merchant_postal_code: String

      attr_accessor merchant_state: String

      attr_accessor recipient_name: String

      attr_accessor sender_address_city: String

      attr_accessor sender_address_line1: String

      attr_accessor sender_address_postal_code: String

      attr_accessor sender_address_state: String

      attr_accessor sender_name: String

      attr_accessor source_account_number_id: String

      attr_accessor status: Increase::Models::CardPushTransfer::status

      attr_accessor submission: Increase::CardPushTransfer::Submission?

      attr_accessor type: Increase::Models::CardPushTransfer::type_

      def initialize: (
        id: String,
        acceptance: Increase::CardPushTransfer::Acceptance?,
        account_id: String,
        amount: Integer,
        approval: Increase::CardPushTransfer::Approval?,
        business_application_identifier: Increase::Models::CardPushTransfer::business_application_identifier,
        cancellation: Increase::CardPushTransfer::Cancellation?,
        created_at: Time,
        created_by: Increase::CardPushTransfer::CreatedBy?,
        currency: Increase::Models::CardPushTransfer::currency,
        decline: Increase::CardPushTransfer::Decline?,
        idempotency_key: String?,
        merchant_category_code: String,
        merchant_city_name: String,
        merchant_name: String,
        merchant_name_prefix: String,
        merchant_postal_code: String,
        merchant_state: String,
        recipient_name: String,
        sender_address_city: String,
        sender_address_line1: String,
        sender_address_postal_code: String,
        sender_address_state: String,
        sender_name: String,
        source_account_number_id: String,
        status: Increase::Models::CardPushTransfer::status,
        submission: Increase::CardPushTransfer::Submission?,
        type: Increase::Models::CardPushTransfer::type_
      ) -> void

      def to_hash: -> {
        id: String,
        acceptance: Increase::CardPushTransfer::Acceptance?,
        account_id: String,
        amount: Integer,
        approval: Increase::CardPushTransfer::Approval?,
        business_application_identifier: Increase::Models::CardPushTransfer::business_application_identifier,
        cancellation: Increase::CardPushTransfer::Cancellation?,
        created_at: Time,
        created_by: Increase::CardPushTransfer::CreatedBy?,
        currency: Increase::Models::CardPushTransfer::currency,
        decline: Increase::CardPushTransfer::Decline?,
        idempotency_key: String?,
        merchant_category_code: String,
        merchant_city_name: String,
        merchant_name: String,
        merchant_name_prefix: String,
        merchant_postal_code: String,
        merchant_state: String,
        recipient_name: String,
        sender_address_city: String,
        :sender_address_line1 => String,
        sender_address_postal_code: String,
        sender_address_state: String,
        sender_name: String,
        source_account_number_id: String,
        status: Increase::Models::CardPushTransfer::status,
        submission: Increase::CardPushTransfer::Submission?,
        type: Increase::Models::CardPushTransfer::type_
      }

      type acceptance =
        {
          accepted_at: Time,
          authorization_identification_response: String,
          :card_verification_value2_result => Increase::Models::CardPushTransfer::Acceptance::card_verification_value2_result?,
          network_transaction_identifier: String?
        }

      class Acceptance < Increase::Internal::Type::BaseModel
        attr_accessor accepted_at: Time

        attr_accessor authorization_identification_response: String

        attr_accessor card_verification_value2_result: Increase::Models::CardPushTransfer::Acceptance::card_verification_value2_result?

        attr_accessor network_transaction_identifier: String?

        def initialize: (
          accepted_at: Time,
          authorization_identification_response: String,
          card_verification_value2_result: Increase::Models::CardPushTransfer::Acceptance::card_verification_value2_result?,
          network_transaction_identifier: String?
        ) -> void

        def to_hash: -> {
          accepted_at: Time,
          authorization_identification_response: String,
          :card_verification_value2_result => Increase::Models::CardPushTransfer::Acceptance::card_verification_value2_result?,
          network_transaction_identifier: String?
        }

        type card_verification_value2_result = :match | :no_match

        module CardVerificationValue2Result
          extend Increase::Internal::Type::Enum

          # The Card Verification Value 2 (CVV2) matches the expected value.
          MATCH: :match

          # The Card Verification Value 2 (CVV2) does not match the expected value.
          NO_MATCH: :no_match

          def self?.values: -> ::Array[Increase::Models::CardPushTransfer::Acceptance::card_verification_value2_result]
        end
      end

      type approval = { approved_at: Time, approved_by: String? }

      class Approval < Increase::Internal::Type::BaseModel
        attr_accessor approved_at: Time

        attr_accessor approved_by: String?

        def initialize: (approved_at: Time, approved_by: String?) -> void

        def to_hash: -> { approved_at: Time, approved_by: String? }
      end

      type business_application_identifier =
        :account_to_account
        | :business_to_business
        | :money_transfer_bank_initiated
        | :non_card_bill_payment
        | :consumer_bill_payment
        | :card_bill_payment
        | :funds_disbursement
        | :funds_transfer
        | :loyalty_and_offers
        | :merchant_disbursement
        | :merchant_payment
        | :person_to_person
        | :top_up
        | :wallet_transfer

      module BusinessApplicationIdentifier
        extend Increase::Internal::Type::Enum

        # Account to Account
        ACCOUNT_TO_ACCOUNT: :account_to_account

        # Business to Business
        BUSINESS_TO_BUSINESS: :business_to_business

        # Money Transfer Bank Initiated
        MONEY_TRANSFER_BANK_INITIATED: :money_transfer_bank_initiated

        # Non-Card Bill Payment
        NON_CARD_BILL_PAYMENT: :non_card_bill_payment

        # Consumer Bill Payment
        CONSUMER_BILL_PAYMENT: :consumer_bill_payment

        # Card Bill Payment
        CARD_BILL_PAYMENT: :card_bill_payment

        # Funds Disbursement
        FUNDS_DISBURSEMENT: :funds_disbursement

        # Funds Transfer
        FUNDS_TRANSFER: :funds_transfer

        # Loyalty and Offers
        LOYALTY_AND_OFFERS: :loyalty_and_offers

        # Merchant Disbursement
        MERCHANT_DISBURSEMENT: :merchant_disbursement

        # Merchant Payment
        MERCHANT_PAYMENT: :merchant_payment

        # Person to Person
        PERSON_TO_PERSON: :person_to_person

        # Top Up
        TOP_UP: :top_up

        # Wallet Transfer
        WALLET_TRANSFER: :wallet_transfer

        def self?.values: -> ::Array[Increase::Models::CardPushTransfer::business_application_identifier]
      end

      type cancellation = { canceled_at: Time, canceled_by: String? }

      class Cancellation < Increase::Internal::Type::BaseModel
        attr_accessor canceled_at: Time

        attr_accessor canceled_by: String?

        def initialize: (canceled_at: Time, canceled_by: String?) -> void

        def to_hash: -> { canceled_at: Time, canceled_by: String? }
      end

      type created_by =
        {
          api_key: Increase::CardPushTransfer::CreatedBy::APIKey?,
          category: Increase::Models::CardPushTransfer::CreatedBy::category,
          oauth_application: Increase::CardPushTransfer::CreatedBy::OAuthApplication?,
          user: Increase::CardPushTransfer::CreatedBy::User?
        }

      class CreatedBy < Increase::Internal::Type::BaseModel
        attr_accessor api_key: Increase::CardPushTransfer::CreatedBy::APIKey?

        attr_accessor category: Increase::Models::CardPushTransfer::CreatedBy::category

        attr_accessor oauth_application: Increase::CardPushTransfer::CreatedBy::OAuthApplication?

        attr_accessor user: Increase::CardPushTransfer::CreatedBy::User?

        def initialize: (
          api_key: Increase::CardPushTransfer::CreatedBy::APIKey?,
          category: Increase::Models::CardPushTransfer::CreatedBy::category,
          oauth_application: Increase::CardPushTransfer::CreatedBy::OAuthApplication?,
          user: Increase::CardPushTransfer::CreatedBy::User?
        ) -> void

        def to_hash: -> {
          api_key: Increase::CardPushTransfer::CreatedBy::APIKey?,
          category: Increase::Models::CardPushTransfer::CreatedBy::category,
          oauth_application: Increase::CardPushTransfer::CreatedBy::OAuthApplication?,
          user: Increase::CardPushTransfer::CreatedBy::User?
        }

        type api_key = { description: String? }

        class APIKey < Increase::Internal::Type::BaseModel
          attr_accessor description: String?

          def initialize: (description: String?) -> void

          def to_hash: -> { description: String? }
        end

        type category = :api_key | :oauth_application | :user

        module Category
          extend Increase::Internal::Type::Enum

          # An API key. Details will be under the `api_key` object.
          API_KEY: :api_key

          # An OAuth application you connected to Increase. Details will be under the `oauth_application` object.
          OAUTH_APPLICATION: :oauth_application

          # A User in the Increase dashboard. Details will be under the `user` object.
          USER: :user

          def self?.values: -> ::Array[Increase::Models::CardPushTransfer::CreatedBy::category]
        end

        type oauth_application = { name: String }

        class OAuthApplication < Increase::Internal::Type::BaseModel
          attr_accessor name: String

          def initialize: (name: String) -> void

          def to_hash: -> { name: String }
        end

        type user = { email: String }

        class User < Increase::Internal::Type::BaseModel
          attr_accessor email: String

          def initialize: (email: String) -> void

          def to_hash: -> { email: String }
        end
      end

      type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

      module Currency
        extend Increase::Internal::Type::Enum

        # Canadian Dollar (CAD)
        CAD: :CAD

        # Swiss Franc (CHF)
        CHF: :CHF

        # Euro (EUR)
        EUR: :EUR

        # British Pound (GBP)
        GBP: :GBP

        # Japanese Yen (JPY)
        JPY: :JPY

        # US Dollar (USD)
        USD: :USD

        def self?.values: -> ::Array[Increase::Models::CardPushTransfer::currency]
      end

      type decline =
        {
          declined_at: Time,
          network_transaction_identifier: String?,
          reason: Increase::Models::CardPushTransfer::Decline::reason
        }

      class Decline < Increase::Internal::Type::BaseModel
        attr_accessor declined_at: Time

        attr_accessor network_transaction_identifier: String?

        attr_accessor reason: Increase::Models::CardPushTransfer::Decline::reason

        def initialize: (
          declined_at: Time,
          network_transaction_identifier: String?,
          reason: Increase::Models::CardPushTransfer::Decline::reason
        ) -> void

        def to_hash: -> {
          declined_at: Time,
          network_transaction_identifier: String?,
          reason: Increase::Models::CardPushTransfer::Decline::reason
        }

        type reason =
          :do_not_honor
          | :activity_count_limit_exceeded
          | :refer_to_card_issuer
          | :refer_to_card_issuer_special_condition
          | :invalid_merchant
          | :pick_up_card
          | :error
          | :pick_up_card_special
          | :invalid_transaction
          | :invalid_amount
          | :invalid_account_number
          | :no_such_issuer
          | :re_enter_transaction
          | :no_credit_account
          | :pick_up_card_lost
          | :pick_up_card_stolen
          | :closed_account
          | :insufficient_funds
          | :no_checking_account
          | :no_savings_account
          | :expired_card
          | :transaction_not_permitted_to_cardholder
          | :transaction_not_allowed_at_terminal
          | :suspected_fraud
          | :activity_amount_limit_exceeded
          | :restricted_card
          | :security_violation
          | :transaction_does_not_fulfill_anti_money_laundering_requirement
          | :blocked_first_use
          | :credit_issuer_unavailable
          | :negative_card_verification_value_results
          | :issuer_unavailable
          | :financial_institution_cannot_be_found
          | :transaction_cannot_be_completed
          | :duplicate_transaction
          | :system_malfunction
          | :additional_customer_authentication_required
          | :surcharge_amount_not_permitted
          | :decline_for_cvv2_failure
          | :stop_payment_order
          | :revocation_of_authorization_order
          | :revocation_of_all_authorizations_order

        module Reason
          extend Increase::Internal::Type::Enum

          # The card issuer has declined the transaction without providing a specific reason.
          DO_NOT_HONOR: :do_not_honor

          # The number of transactions for the card has exceeded the limit set by the issuer.
          ACTIVITY_COUNT_LIMIT_EXCEEDED: :activity_count_limit_exceeded

          # The card issuer requires the cardholder to contact them for further information regarding the transaction.
          REFER_TO_CARD_ISSUER: :refer_to_card_issuer

          # The card issuer requires the cardholder to contact them due to a special condition related to the transaction.
          REFER_TO_CARD_ISSUER_SPECIAL_CONDITION: :refer_to_card_issuer_special_condition

          # The merchant is not valid for this transaction.
          INVALID_MERCHANT: :invalid_merchant

          # The card should be retained by the terminal.
          PICK_UP_CARD: :pick_up_card

          # An error occurred during processing of the transaction.
          ERROR: :error

          # The card should be retained by the terminal due to a special condition.
          PICK_UP_CARD_SPECIAL: :pick_up_card_special

          # The transaction is invalid and cannot be processed.
          INVALID_TRANSACTION: :invalid_transaction

          # The amount of the transaction is invalid.
          INVALID_AMOUNT: :invalid_amount

          # The account number provided is invalid.
          INVALID_ACCOUNT_NUMBER: :invalid_account_number

          # The issuer of the card could not be found.
          NO_SUCH_ISSUER: :no_such_issuer

          # The transaction should be re-entered for processing.
          RE_ENTER_TRANSACTION: :re_enter_transaction

          # There is no credit account associated with the card.
          NO_CREDIT_ACCOUNT: :no_credit_account

          # The card should be retained by the terminal because it has been reported lost.
          PICK_UP_CARD_LOST: :pick_up_card_lost

          # The card should be retained by the terminal because it has been reported stolen.
          PICK_UP_CARD_STOLEN: :pick_up_card_stolen

          # The account associated with the card has been closed.
          CLOSED_ACCOUNT: :closed_account

          # There are insufficient funds in the account to complete the transaction.
          INSUFFICIENT_FUNDS: :insufficient_funds

          # There is no checking account associated with the card.
          NO_CHECKING_ACCOUNT: :no_checking_account

          # There is no savings account associated with the card.
          NO_SAVINGS_ACCOUNT: :no_savings_account

          # The card has expired and cannot be used for transactions.
          EXPIRED_CARD: :expired_card

          # The transaction is not permitted for this cardholder.
          TRANSACTION_NOT_PERMITTED_TO_CARDHOLDER: :transaction_not_permitted_to_cardholder

          # The transaction is not allowed at this terminal.
          TRANSACTION_NOT_ALLOWED_AT_TERMINAL: :transaction_not_allowed_at_terminal

          # The transaction has been flagged as suspected fraud and cannot be processed.
          SUSPECTED_FRAUD: :suspected_fraud

          # The amount of activity on the card has exceeded the limit set by the issuer.
          ACTIVITY_AMOUNT_LIMIT_EXCEEDED: :activity_amount_limit_exceeded

          # The card has restrictions that prevent it from being used for this transaction.
          RESTRICTED_CARD: :restricted_card

          # A security violation has occurred, preventing the transaction from being processed.
          SECURITY_VIOLATION: :security_violation

          # The transaction does not meet the anti-money laundering requirements set by the issuer.
          TRANSACTION_DOES_NOT_FULFILL_ANTI_MONEY_LAUNDERING_REQUIREMENT: :transaction_does_not_fulfill_anti_money_laundering_requirement

          # The first use of the card has been blocked by the issuer.
          BLOCKED_FIRST_USE: :blocked_first_use

          # The credit issuer is currently unavailable to process the transaction.
          CREDIT_ISSUER_UNAVAILABLE: :credit_issuer_unavailable

          # The card verification value (CVV) results were negative, indicating a potential issue with the card.
          NEGATIVE_CARD_VERIFICATION_VALUE_RESULTS: :negative_card_verification_value_results

          # The issuer of the card is currently unavailable to process the transaction.
          ISSUER_UNAVAILABLE: :issuer_unavailable

          # The financial institution associated with the card could not be found.
          FINANCIAL_INSTITUTION_CANNOT_BE_FOUND: :financial_institution_cannot_be_found

          # The transaction cannot be completed due to an unspecified reason.
          TRANSACTION_CANNOT_BE_COMPLETED: :transaction_cannot_be_completed

          # The transaction is a duplicate of a previous transaction and cannot be processed again.
          DUPLICATE_TRANSACTION: :duplicate_transaction

          # A system malfunction occurred, preventing the transaction from being processed.
          SYSTEM_MALFUNCTION: :system_malfunction

          # Additional customer authentication is required to complete the transaction.
          ADDITIONAL_CUSTOMER_AUTHENTICATION_REQUIRED: :additional_customer_authentication_required

          # The surcharge amount applied to the transaction is not permitted by the issuer.
          SURCHARGE_AMOUNT_NOT_PERMITTED: :surcharge_amount_not_permitted

          # The transaction was declined due to a failure in verifying the CVV2 code.
          DECLINE_FOR_CVV2_FAILURE: :decline_for_cvv2_failure

          # A stop payment order has been placed on this transaction.
          STOP_PAYMENT_ORDER: :stop_payment_order

          # An order has been placed to revoke authorization for this transaction.
          REVOCATION_OF_AUTHORIZATION_ORDER: :revocation_of_authorization_order

          # An order has been placed to revoke all authorizations for this cardholder.
          REVOCATION_OF_ALL_AUTHORIZATIONS_ORDER: :revocation_of_all_authorizations_order

          def self?.values: -> ::Array[Increase::Models::CardPushTransfer::Decline::reason]
        end
      end

      type status =
        :pending_approval
        | :canceled
        | :pending_reviewing
        | :requires_attention
        | :pending_submission
        | :submitted
        | :complete
        | :declined

      module Status
        extend Increase::Internal::Type::Enum

        # The transfer is pending approval.
        PENDING_APPROVAL: :pending_approval

        # The transfer has been canceled.
        CANCELED: :canceled

        # The transfer is pending review by Increase.
        PENDING_REVIEWING: :pending_reviewing

        # The transfer requires attention from an Increase operator.
        REQUIRES_ATTENTION: :requires_attention

        # The transfer is queued to be submitted to the card network.
        PENDING_SUBMISSION: :pending_submission

        # The transfer has been submitted and is pending a response from the card network.
        SUBMITTED: :submitted

        # The transfer has been sent successfully and is complete.
        COMPLETE: :complete

        # The transfer was declined by the network or the recipient's bank.
        DECLINED: :declined

        def self?.values: -> ::Array[Increase::Models::CardPushTransfer::status]
      end

      type submission =
        {
          retrieval_reference_number: String,
          sender_reference: String,
          submitted_at: Time,
          trace_number: String
        }

      class Submission < Increase::Internal::Type::BaseModel
        attr_accessor retrieval_reference_number: String

        attr_accessor sender_reference: String

        attr_accessor submitted_at: Time

        attr_accessor trace_number: String

        def initialize: (
          retrieval_reference_number: String,
          sender_reference: String,
          submitted_at: Time,
          trace_number: String
        ) -> void

        def to_hash: -> {
          retrieval_reference_number: String,
          sender_reference: String,
          submitted_at: Time,
          trace_number: String
        }
      end

      type type_ = :card_push_transfer

      module Type
        extend Increase::Internal::Type::Enum

        CARD_PUSH_TRANSFER: :card_push_transfer

        def self?.values: -> ::Array[Increase::Models::CardPushTransfer::type_]
      end
    end
  end
end
