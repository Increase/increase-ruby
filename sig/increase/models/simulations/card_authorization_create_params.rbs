module Increase
  module Models
    module Simulations
      type card_authorization_create_params =
        {
          amount: Integer,
          authenticated_card_payment_id: String,
          card_id: String,
          decline_reason: Increase::Models::Simulations::CardAuthorizationCreateParams::decline_reason,
          digital_wallet_token_id: String,
          direction: Increase::Models::Simulations::CardAuthorizationCreateParams::direction,
          event_subscription_id: String,
          merchant_acceptor_id: String,
          merchant_category_code: String,
          merchant_city: String,
          merchant_country: String,
          merchant_descriptor: String,
          merchant_state: String,
          physical_card_id: String,
          terminal_id: String
        }
        & Increase::request_parameters

      class CardAuthorizationCreateParams < Increase::BaseModel
        extend Increase::RequestParameters::Converter
        include Increase::RequestParameters

        attr_accessor amount: Integer

        attr_reader authenticated_card_payment_id: String?

        def authenticated_card_payment_id=: (String) -> void

        attr_reader card_id: String?

        def card_id=: (String) -> void

        attr_reader decline_reason: Increase::Models::Simulations::CardAuthorizationCreateParams::decline_reason?

        def decline_reason=: (
          Increase::Models::Simulations::CardAuthorizationCreateParams::decline_reason
        ) -> void

        attr_reader digital_wallet_token_id: String?

        def digital_wallet_token_id=: (String) -> void

        attr_reader direction: Increase::Models::Simulations::CardAuthorizationCreateParams::direction?

        def direction=: (
          Increase::Models::Simulations::CardAuthorizationCreateParams::direction
        ) -> void

        attr_reader event_subscription_id: String?

        def event_subscription_id=: (String) -> void

        attr_reader merchant_acceptor_id: String?

        def merchant_acceptor_id=: (String) -> void

        attr_reader merchant_category_code: String?

        def merchant_category_code=: (String) -> void

        attr_reader merchant_city: String?

        def merchant_city=: (String) -> void

        attr_reader merchant_country: String?

        def merchant_country=: (String) -> void

        attr_reader merchant_descriptor: String?

        def merchant_descriptor=: (String) -> void

        attr_reader merchant_state: String?

        def merchant_state=: (String) -> void

        attr_reader physical_card_id: String?

        def physical_card_id=: (String) -> void

        attr_reader terminal_id: String?

        def terminal_id=: (String) -> void

        def initialize:
          (
            amount: Integer,
            authenticated_card_payment_id: String,
            card_id: String,
            decline_reason: Increase::Models::Simulations::CardAuthorizationCreateParams::decline_reason,
            digital_wallet_token_id: String,
            direction: Increase::Models::Simulations::CardAuthorizationCreateParams::direction,
            event_subscription_id: String,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String,
            merchant_country: String,
            merchant_descriptor: String,
            merchant_state: String,
            physical_card_id: String,
            terminal_id: String,
            request_options: Increase::request_opts
          ) -> void
          | (
            ?Increase::Models::Simulations::card_authorization_create_params
            | Increase::BaseModel data
          ) -> void

        def to_hash: -> Increase::Models::Simulations::card_authorization_create_params

        type decline_reason =
          :card_not_active
          | :physical_card_not_active
          | :entity_not_active
          | :group_locked
          | :insufficient_funds
          | :cvv2_mismatch
          | :card_expiration_mismatch
          | :transaction_not_allowed
          | :breaches_limit
          | :webhook_declined
          | :webhook_timed_out
          | :declined_by_stand_in_processing
          | :invalid_physical_card
          | :missing_original_authorization
          | :suspected_fraud

        class DeclineReason < Increase::Enum
          # The Card was not active.
          CARD_NOT_ACTIVE: :card_not_active

          # The Physical Card was not active.
          PHYSICAL_CARD_NOT_ACTIVE: :physical_card_not_active

          # The account's entity was not active.
          ENTITY_NOT_ACTIVE: :entity_not_active

          # The account was inactive.
          GROUP_LOCKED: :group_locked

          # The Card's Account did not have a sufficient available balance.
          INSUFFICIENT_FUNDS: :insufficient_funds

          # The given CVV2 did not match the card's value.
          CVV2_MISMATCH: :cvv2_mismatch

          # The given expiration date did not match the card's value. Only applies when a CVV2 is present.
          CARD_EXPIRATION_MISMATCH: :card_expiration_mismatch

          # The attempted card transaction is not allowed per Increase's terms.
          TRANSACTION_NOT_ALLOWED: :transaction_not_allowed

          # The transaction was blocked by a Limit.
          BREACHES_LIMIT: :breaches_limit

          # Your application declined the transaction via webhook.
          WEBHOOK_DECLINED: :webhook_declined

          # Your application webhook did not respond without the required timeout.
          WEBHOOK_TIMED_OUT: :webhook_timed_out

          # Declined by stand-in processing.
          DECLINED_BY_STAND_IN_PROCESSING: :declined_by_stand_in_processing

          # The card read had an invalid CVV, dCVV, or authorization request cryptogram.
          INVALID_PHYSICAL_CARD: :invalid_physical_card

          # The original card authorization for this incremental authorization does not exist.
          MISSING_ORIGINAL_AUTHORIZATION: :missing_original_authorization

          # The transaction was suspected to be fraudulent. Please reach out to support@increase.com for more information.
          SUSPECTED_FRAUD: :suspected_fraud

          def self.values: -> ::Array[Increase::Models::Simulations::CardAuthorizationCreateParams::decline_reason]
        end

        type direction = :settlement | :refund

        class Direction < Increase::Enum
          # A regular card authorization where funds are debited from the cardholder.
          SETTLEMENT: :settlement

          # A refund card authorization, sometimes referred to as a credit voucher authorization, where funds are credited to the cardholder.
          REFUND: :refund

          def self.values: -> ::Array[Increase::Models::Simulations::CardAuthorizationCreateParams::direction]
        end
      end
    end
  end
end
