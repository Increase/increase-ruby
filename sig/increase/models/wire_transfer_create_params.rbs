module Increase
  module Models
    type wire_transfer_create_params =
      {
        account_id: String,
        amount: Integer,
        beneficiary_name: String,
        account_number: String,
        :beneficiary_address_line1 => String,
        :beneficiary_address_line2 => String,
        :beneficiary_address_line3 => String,
        external_account_id: String,
        inbound_wire_drawdown_request_id: String,
        :originator_address_line1 => String,
        :originator_address_line2 => String,
        :originator_address_line3 => String,
        originator_name: String,
        remittance: Increase::WireTransferCreateParams::Remittance,
        require_approval: bool,
        routing_number: String,
        source_account_number_id: String
      }
      & Increase::Internal::Type::request_parameters

    class WireTransferCreateParams < Increase::Internal::Type::BaseModel
      extend Increase::Internal::Type::RequestParameters::Converter
      include Increase::Internal::Type::RequestParameters

      attr_accessor account_id: String

      attr_accessor amount: Integer

      attr_accessor beneficiary_name: String

      attr_reader account_number: String?

      def account_number=: (String) -> String

      attr_reader beneficiary_address_line1: String?

      def beneficiary_address_line1=: (String) -> String

      attr_reader beneficiary_address_line2: String?

      def beneficiary_address_line2=: (String) -> String

      attr_reader beneficiary_address_line3: String?

      def beneficiary_address_line3=: (String) -> String

      attr_reader external_account_id: String?

      def external_account_id=: (String) -> String

      attr_reader inbound_wire_drawdown_request_id: String?

      def inbound_wire_drawdown_request_id=: (String) -> String

      attr_reader originator_address_line1: String?

      def originator_address_line1=: (String) -> String

      attr_reader originator_address_line2: String?

      def originator_address_line2=: (String) -> String

      attr_reader originator_address_line3: String?

      def originator_address_line3=: (String) -> String

      attr_reader originator_name: String?

      def originator_name=: (String) -> String

      attr_reader remittance: Increase::WireTransferCreateParams::Remittance?

      def remittance=: (
        Increase::WireTransferCreateParams::Remittance
      ) -> Increase::WireTransferCreateParams::Remittance

      attr_reader require_approval: bool?

      def require_approval=: (bool) -> bool

      attr_reader routing_number: String?

      def routing_number=: (String) -> String

      attr_reader source_account_number_id: String?

      def source_account_number_id=: (String) -> String

      def initialize: (
        account_id: String,
        amount: Integer,
        beneficiary_name: String,
        ?account_number: String,
        ?beneficiary_address_line1: String,
        ?beneficiary_address_line2: String,
        ?beneficiary_address_line3: String,
        ?external_account_id: String,
        ?inbound_wire_drawdown_request_id: String,
        ?originator_address_line1: String,
        ?originator_address_line2: String,
        ?originator_address_line3: String,
        ?originator_name: String,
        ?remittance: Increase::WireTransferCreateParams::Remittance,
        ?require_approval: bool,
        ?routing_number: String,
        ?source_account_number_id: String,
        ?request_options: Increase::request_opts
      ) -> void

      def to_hash: -> {
        account_id: String,
        amount: Integer,
        beneficiary_name: String,
        account_number: String,
        :beneficiary_address_line1 => String,
        :beneficiary_address_line2 => String,
        :beneficiary_address_line3 => String,
        external_account_id: String,
        inbound_wire_drawdown_request_id: String,
        :originator_address_line1 => String,
        :originator_address_line2 => String,
        :originator_address_line3 => String,
        originator_name: String,
        remittance: Increase::WireTransferCreateParams::Remittance,
        require_approval: bool,
        routing_number: String,
        source_account_number_id: String,
        request_options: Increase::RequestOptions
      }

      type remittance =
        {
          category: Increase::Models::WireTransferCreateParams::Remittance::category,
          tax: Increase::WireTransferCreateParams::Remittance::Tax,
          unstructured: Increase::WireTransferCreateParams::Remittance::Unstructured
        }

      class Remittance < Increase::Internal::Type::BaseModel
        attr_accessor category: Increase::Models::WireTransferCreateParams::Remittance::category

        attr_reader tax: Increase::WireTransferCreateParams::Remittance::Tax?

        def tax=: (
          Increase::WireTransferCreateParams::Remittance::Tax
        ) -> Increase::WireTransferCreateParams::Remittance::Tax

        attr_reader unstructured: Increase::WireTransferCreateParams::Remittance::Unstructured?

        def unstructured=: (
          Increase::WireTransferCreateParams::Remittance::Unstructured
        ) -> Increase::WireTransferCreateParams::Remittance::Unstructured

        def initialize: (
          category: Increase::Models::WireTransferCreateParams::Remittance::category,
          ?tax: Increase::WireTransferCreateParams::Remittance::Tax,
          ?unstructured: Increase::WireTransferCreateParams::Remittance::Unstructured
        ) -> void

        def to_hash: -> {
          category: Increase::Models::WireTransferCreateParams::Remittance::category,
          tax: Increase::WireTransferCreateParams::Remittance::Tax,
          unstructured: Increase::WireTransferCreateParams::Remittance::Unstructured
        }

        type category = :unstructured | :tax

        module Category
          extend Increase::Internal::Type::Enum

          # The wire transfer contains unstructured remittance information.
          UNSTRUCTURED: :unstructured

          # The wire transfer is for tax payment purposes to the Internal Revenue Service (IRS).
          TAX: :tax

          def self?.values: -> ::Array[Increase::Models::WireTransferCreateParams::Remittance::category]
        end

        type tax =
          { date: Date, identification_number: String, type_code: String }

        class Tax < Increase::Internal::Type::BaseModel
          attr_accessor date: Date

          attr_accessor identification_number: String

          attr_accessor type_code: String

          def initialize: (
            date: Date,
            identification_number: String,
            type_code: String
          ) -> void

          def to_hash: -> {
            date: Date,
            identification_number: String,
            type_code: String
          }
        end

        type unstructured = { message: String }

        class Unstructured < Increase::Internal::Type::BaseModel
          attr_accessor message: String

          def initialize: (message: String) -> void

          def to_hash: -> { message: String }
        end
      end
    end
  end
end
